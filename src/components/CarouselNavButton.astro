---
const { direction, hideOnDesktop, transform, position, label } = Astro.props;
---

<button
  class={`carousel-nav ${direction} ${hideOnDesktop ? "hide-on-desktop" : ""}`}
  aria-label={`${direction} image`}
  style={`--carousel-transform: ${transform}; --carousel-position: ${position};`}
  data-label={`${label}`}
>
  {
    direction === "previous" ? (
      <svg
        aria-hidden="true"
        focusable="false"
        width="12"
        height="18"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M11 1 3 9l8 8"
          stroke="#1D2026"
          stroke-width="3"
          fill="none"
          fill-rule="evenodd"
        />
      </svg>
    ) : (
      <svg
        aria-hidden="true"
        focusable="false"
        width="13"
        height="18"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="m2 1 8 8-8 8"
          stroke="#1D2026"
          stroke-width="3"
          fill="none"
          fill-rule="evenodd"
        />
      </svg>
    )
  }
</button>

<style lang="scss">
  @use "../styles/abstracts/" as *;

  .carousel-nav {
    aspect-ratio: 1 / 1;
    background-color: $color-neutral-400;
    border-radius: 100vh;
    display: grid;
    place-content: center;
    position: absolute;
    top: 50%;
    transform: translateY(var(--carousel-transform));
    width: 40px;
    height: 40px;
    z-index: 10;

    @include mq(medium) {
      width: 56px;
      height: 56px;
    }
  }

  .previous {
    left: var(--carousel-position);
  }

  .next {
    right: var(--carousel-position);
  }

  .carousel-nav:is(:hover, :focus) path {
    stroke: $color-primary-500;
  }

  .carousel-nav:focus-visible {
    outline: 6px solid $color-primary-500;
    outline-offset: 8px;
  }

  .hide-on-desktop {
    @include mq(small) {
      display: none;
    }
  }
</style>
